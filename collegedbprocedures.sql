use collegeerp;

-- PROCEDURES
-- PROCEDURES
-- PROCEDURES





-- VIEW PROCEDURES 
-- VIEW PROCEDURES 
-- VIEW PROCEDURES 




DELIMITER //
CREATE PROCEDURE VIEW_ADMINS()
BEGIN 
SELECT * FROM ADMIN;
END //
DELIMITER ;
CALL VIEW_ADMINS();

DELIMITER //
CREATE PROCEDURE VIEW_STUDENTS()
BEGIN 
SELECT * FROM STUDENTS;
END //
DELIMITER ;
CALL VIEW_STUDENTS();

DELIMITER //
CREATE PROCEDURE VIEW_STUDENTS_PER_CLASS(IN in_class char)
BEGIN 
SELECT * FROM STUDENTS where class=in_class;
END //
DELIMITER ;
CALL VIEW_STUDENTS_PER_CLASS('c');

DELIMITER //
CREATE PROCEDURE VIEW_STUDENTS_PER_DEPT(IN in_dept varchar(50))
BEGIN 
SELECT * FROM STUDENTS s INNER JOIN DEPARTMENTS d on s.dept_id=d.d_id where d.dept_name=in_dept ;
END //
DELIMITER ;
CALL VIEW_STUDENTS_PER_DEPT('INFORMATION TECHNOLOGY');

DELIMITER //
CREATE PROCEDURE VIEW_STUDENTS_PER_SEM(IN in_sem INT)
BEGIN 
SELECT * FROM STUDENTS where semester = in_sem;
END //
DELIMITER ;
CALL VIEW_STUDENTS_PER_SEM(5);

DELIMITER //
CREATE PROCEDURE VIEW_GRADUATED_STUDENTS()
BEGIN 
SELECT * FROM STUDENTS where graduated=TRUE;
END //
DELIMITER ;
DROP PROCEDURE VIEW_GRADUATED_STUDENTS;
CALL VIEW_GRADUATED_STUDENTS();

DELIMITER //
CREATE PROCEDURE VIEW_DEPARTMENTS()
BEGIN 
  SELECT * FROM DEPARTMENTS;
END //
DELIMITER ;
-- CALL
CALL VIEW_DEPARTMENTS();

DELIMITER //
CREATE PROCEDURE VIEW_SUBJECTS()
BEGIN 
  SELECT * FROM SUBJECTS;
END //
DELIMITER ;
CALL VIEW_SUBJECTS();

DELIMITER //
CREATE PROCEDURE VIEW_SUBJECTS_BY_DEPT_AND_SEM(IN in_dept VARCHAR(100), IN in_sem TINYINT)
BEGIN
  SELECT s.* FROM SUBJECTS s
  INNER JOIN DEPARTMENTS d ON s.subject_dept = d.d_id
  WHERE d.dept_name = in_dept AND s.subj_semester = in_sem;
END //
DELIMITER ;
CALL VIEW_SUBJECTS_BY_DEPT_AND_SEM('COMPUTER SCIENCE', 5);

DELIMITER //
CREATE PROCEDURE VIEW_ATTENDANCE()
BEGIN 
  SELECT * FROM ATTENDANCE;
END //
DELIMITER ;
CALL VIEW_ATTENDANCE();

DELIMITER //
CREATE PROCEDURE VIEW_ATTENDANCE_BY_STUDENT(IN in_roll INT)
BEGIN
  SELECT a.* FROM ATTENDANCE a
  INNER JOIN STUDENTS s ON a.student_id = s.S_id
  WHERE s.roll_no = in_roll;
END //
DELIMITER ;
CALL VIEW_ATTENDANCE_BY_STUDENT(1023);

DELIMITER //
CREATE PROCEDURE VIEW_ATTENDANCE_BY_SUBJECT(IN in_subj_id INT)
BEGIN
  SELECT a.* FROM ATTENDANCE a
  INNER JOIN subjects s ON a.subj_id = s.subject_id
  WHERE s.subject_id = in_subj_id;
END //
DELIMITER ;
CALL VIEW_ATTENDANCE_BY_SUBJECT(5);

DELIMITER //
CREATE PROCEDURE VIEW_ATTENDANCE_BY_CLASS(IN in_class char)
BEGIN
  SELECT a.* FROM ATTENDANCE a
  INNER JOIN STUDENTS s ON a.student_id = s.S_id
  WHERE s.class = in_class;
END //
DELIMITER ;
DROP PROCEDURE VIEW_ATTENDANCE_BY_CLASS;
CALL VIEW_ATTENDANCE_BY_CLASS('A');

DELIMITER //
CREATE PROCEDURE VIEW_ATTENDANCE_BY_DEPT(IN in_dept INT)
BEGIN
  SELECT a.* FROM ATTENDANCE a
  INNER JOIN STUDENTS s ON a.student_id = s.S_id
  WHERE s.dept_id = in_dept;
END //
DELIMITER ;
CALL VIEW_ATTENDANCE_BY_dept(2);

DELIMITER //
CREATE PROCEDURE VIEW_RESULTS()
BEGIN 
  SELECT * FROM RESULTS;
END //
DELIMITER ;
CALL VIEW_RESULTS();

DELIMITER //
CREATE PROCEDURE VIEW_RESULTS_BY_STUDENT(IN in_roll INT)
BEGIN
  SELECT r.* FROM RESULTS r
  INNER JOIN STUDENTS s ON r.student_id = s.S_id
  WHERE s.roll_no = in_roll;
END //
DELIMITER ;
CALL VIEW_RESULTS_BY_STUDENT(12345);

DELIMITER //
CREATE PROCEDURE VIEW_FEES()
BEGIN 
  SELECT * FROM FEES;
END //
DELIMITER ;
CALL VIEW_FEES();

DELIMITER //
CREATE PROCEDURE VIEW_FEES_BY_STUDENT(IN in_roll INT)
BEGIN
  SELECT f.* FROM FEES f
  INNER JOIN STUDENTS s ON f.student_id = s.S_id
  WHERE s.roll_no = in_roll;
END //
DELIMITER ;
CALL VIEW_FEES_BY_STUDENT(12345);

DELIMITER //
CREATE PROCEDURE VIEW_ANNOUNCEMENTS()
BEGIN 
  SELECT * FROM ANNOUNCEMENTS ORDER BY posted_on DESC;
END //
DELIMITER ;
CALL VIEW_ANNOUNCEMENTS();

DELIMITER //
CREATE PROCEDURE VIEW_GRACE_REQUESTS()
BEGIN 
  SELECT * FROM GRACE_REQUESTS ORDER BY requested_on DESC;
END //
DELIMITER ;
CALL VIEW_GRACE_REQUESTS();

DELIMITER //
CREATE PROCEDURE VIEW_ID_CARD_REQUESTS()
BEGIN 
  SELECT * FROM ID_CARD_REQUESTS ORDER BY requested_on DESC;
END //
DELIMITER ;
CALL VIEW_ID_CARD_REQUESTS();

DELIMITER //
CREATE PROCEDURE VIEW_TIMETABLE()
BEGIN 
  SELECT * FROM TIMETABLE;
END //
DELIMITER ;
CALL VIEW_TIMETABLE();









-- REGISTER LOGIN PROCEDURES
-- REGISTER LOGIN PROCEDURES
-- REGISTER LOGIN PROCEDURES








DELIMITER //
CREATE PROCEDURE FIND_STUDENT_RECORD(IN in_name varchar(100), IN in_mail varchar(100), IN in_phone TEXT)
BEGIN 
IF EXISTS 
	(SELECT 1 FROM STUDENTS where name=in_name AND student_mail=in_mail AND phone=in_phone) 
THEN 
	SELECT TRUE AS student_found, 'Student details found.' AS message;
ELSE
	SELECT FALSE AS student_found, 'Student details not found.' AS message;
END IF;
END //
DELIMITER ;
CALL FIND_STUDENT_RECORD('Rohit Anil Sharma', 'rohit.sharma@example.com','9876543210');

DELIMITER //
CREATE PROCEDURE FIND_ADMIN_RECORD(IN in_name varchar(100), IN in_mail varchar(100), IN in_phone TEXT)
BEGIN 
IF EXISTS 
	(SELECT 1 FROM ADMIN where name=in_name AND admin_mail=in_mail AND phone=in_phone) 
THEN 
	SELECT TRUE AS admin_found, 'Admin details found.' AS message;
ELSE
	SELECT FALSE AS admin_found, 'Admin details not found.' AS message;
END IF;
END //
DELIMITER ;
CALL FIND_ADMIN_RECORD('Vikram Lalit Chauhan', 'vikram.chauhan@college.edu', '9876543216');

DELIMITER // 
CREATE PROCEDURE CHECK_FIRSTTIME_STUDENT_REGISTER(IN in_name TEXT) 
BEGIN 
DECLARE pass varchar(50);
SELECT password into pass FROM STUDENTS WHERE name = in_name;
IF pass IS NULL 
THEN 
SELECT 'Registering student. redirecting to password creation page' AS message;
ELSE 
SELECT 'Student already registered! Redirecting to login page.' AS message;
END IF;
END //
DELIMITER ; 
CALL CHECK_FIRSTTIME_STUDENT_REGISTER('Vikram Raghav Chauhan');
UPDATE STUDENTS SET PASSword ='Baka' where name= 'Vikram Raghav Chauhan';
DELETE FROM STUDENTS where name= 'Vikram Raghav Chauhan';

DELIMITER // 
CREATE PROCEDURE CHECK_FIRSTTIME_ADMIN_REGISTER(IN in_name TEXT) 
BEGIN 
DECLARE pass varchar(50);
SELECT password into pass FROM ADMIN WHERE name = in_name;
IF pass IS NULL 
THEN 
SELECT 'Registering Admin. redirecting to password creation page' AS message;
ELSE 
SELECT 'Admin already registered! Redirecting to login page.' AS message;
END IF;
END //
DELIMITER ; 
CALL CHECK_FIRSTTIME_ADMIN_REGISTER('Neha Ramesh Mehta');
UPDATE ADMIN SET password ='Baka' WHERE name='Neha Ramesh Mehta';
DELETE FROM ADMIN where name= 'Vikram Raghav Chauhan';


DELIMITER // 
CREATE PROCEDURE CREATE_STUDENT_PASSWORD(IN in_name TEXT, IN in_password TEXT)
BEGIN 
IF (SELECT password FROM STUDENTS where name = in_name) IS NULL 
THEN
UPDATE STUDENTS SET PASSWORD = in_password where name = in_name;
ELSE SELECT 'ERROR PASSWORD ALREADY EXISTS' AS message; 
END IF;
END // 
DELIMITER ; 
SELECT * FROM STUDENTS WHERE ROLL_no = 1414;
INSERT INTO STUDENTS(name, student_mail, roll_no, dept_id, year, semester, class, graduated, phone, password)
VALUE
('Sagar Vinod Janjoted', 'sagar.janjoted@example.com', 1414, 1, 2, 4, 'A', FALSE, '9699456780', NULL);
CALL CREATE_STUDENT_PASSWORD('Sagar Vinod Janjoted','HeheBruhhh');
DELETE FROM STUDENTS where name = 'Sagar Vinod Janjoted';

DELIMITER // 
CREATE PROCEDURE CREATE_ADMIN_PASSWORD(IN in_name TEXT, IN in_password TEXT)
BEGIN 
IF (SELECT password FROM ADMIN where name = in_name) IS NULL 
THEN
UPDATE ADMIN SET PASSWORD = in_password where name = in_name;
ELSE SELECT 'ERROR PASSWORD ALREADY EXISTS' AS message; 
END IF;
END // 
DELIMITER ; 
SELECT * FROM ADMIN WHERE phone = '9876567210';
INSERT INTO ADMIN (name, admin_mail, phone, password) VALUE
('Sagar Vinod Janjoted', 'sagar.sharma@college.edu', '9876567210', NULL);
CALL CREATE_ADMIN_PASSWORD('Sagar Vinod Janjoted','HeheBruhhh');
DELETE FROM STUDENTS where name = 'Sagar Vinod Janjoted';

DELIMITER // 
CREATE PROCEDURE LOGIN_ADMIN(IN in_name text, IN ENTERED_PASS TEXT)
BEGIN 
DECLARE actualpass TEXT;
IF EXISTS (SELECT * FROM ADMIN WHERE name = in_name) 
THEN 
	SELECT password into actualpass FROM ADMIN where name=in_name;
	IF actualpass = ENTERED_PASS THEN
		SELECT 'lOGIN SUCCESSFUL' AS MESSAGE;
	ELSE 
		SELECT 'PASSWORD IS WRONG' AS MESSAGE;
	END IF;
ELSE SELECT 'Admin not on records' as message;
END IF ;
END //
DELIMITER ; 
CALL LOGIN_ADMIN('Sagar Vinod Janjote','HeheBruhh');

DELIMITER // 
CREATE PROCEDURE LOGIN_STUDENT(IN in_name text, IN ENTERED_PASS TEXT)
BEGIN 
DECLARE actualpass TEXT;
IF EXISTS (SELECT * FROM STUDENTS WHERE name = in_name) 
THEN 
	SELECT password into actualpass FROM STUDENTS where name=in_name;
	IF actualpass = ENTERED_PASS THEN
		SELECT 'lOGIN SUCCESSFUL' AS MESSAGE;
	ELSE 
		SELECT 'PASSWORD IS WRONG' AS MESSAGE;
	END IF;
ELSE SELECT 'STUDENT not on records' as message;
END IF ;
END //
DELIMITER ; 
DROP PROCEDURE LOGIN_STUDENT;
CALL LOGIN_STUDENT('Sagar Vinod Janjoted','HeheBruhhh');
